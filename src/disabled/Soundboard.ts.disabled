import { Command, CommandMessage, Description, Discord, Guard } from "discordx";
import { Owner } from "./guards/Owner.ts.disabled";
import { RequireDB } from "./guards/RequireDB.ts.disabled";
import fs from "fs/promises";
import { createWriteStream } from "fs";
import { Database } from "./modules/database/Database";
import fetch from "node-fetch";

@Discord("$sound ")
export abstract class Soundboard {
  @Command("add :name :filename")
  @Description("Adds a sound to the bot")
  @Guard(Owner, RequireDB)
  async addSound(message: CommandMessage): Promise<void> {
    const { name, filename } = message.args;
    const sound = await Database.sounds.findOne({ name });
    if (sound) void message.reply(":cross: You are trying to add a sound that already exists.");
    if (!filename && message.attachments.size === 1) {
      const file = message.attachments.array()[0];
      if (!file.url.endsWith(".mp3" || ".wav" || ".m4a")) void message.reply("File must end in .mp3, .wav or .m4a.");
      void fetch(file.url).then((res) => {
        const stream = createWriteStream(`../sounds/${String(filename)}`);
        res.body.pipe(stream, { end: false });
        stream.on("end", () => {
          stream.end();
          void Database.sounds.insert({ name, filename });
          void message.reply(`:white_check_mark: Sound successfully uploaded.`);
        });
        stream.on("error", (err: Error) => {
          stream.end();
          void console.error(err);
        });
      });
    } else if (filename && message.attachments.size === 0) {
      void Database.sounds.insert({ name, filename });
    } else {
      void message.reply(":exclamation: No file or filename input found!");
    }

    // Get sound, check if it exists in soundboard repository. Keyvalue pair in mongodb maybe? Or enmap?
    // Then if so, join voice channel, connection.play, on("finish") leave.
  }

  @Command("edit :name :newName :newFilename")
  @Description("Edits an existing sound on the bot")
  @Guard(Owner, RequireDB)
  editSound(message: CommandMessage): void {
    const name: string = message.args.name;
    const newName: string = message.args.newName;
    const newFilename: string = message.args.newFilename;
    if (!name) void message.reply(":cross: Please provide a name.");
    if (!newFilename && !newName && message.attachments.size === 1) {
      const file = message.attachments.array()[0];
      if (file.url && !file.url.endsWith(".mp3" || ".wav" || ".m4a"))
        void message.reply("File must end in .mp3, .wav or .m4a.");
      const filename = file.name;
      void fetch(file.url).then((res) => {
        const stream = createWriteStream(`../sounds/${String(filename)}`);
        res.body.pipe(stream, { end: false });
        stream.on("end", () => {
          stream.end();
          void Database.sounds.update({ name }, { name, filename: String(filename) });
          void message.reply(`:white_check_mark: Sound successfully uploaded.`);
        });
        stream.on("error", (err: Error) => {
          stream.end();
          void console.error(err);
        });
      });
    } else if (newFilename && !newName && message.attachments.size === 0)
      void Database.sounds.update({ name }, { filename: newFilename });
    else if (!newFilename && newName) void Database.sounds.update({ name }, { name: newName });
    else if (newFilename && newName && message.attachments.size === 0)
      void Database.sounds.update({ name }, { name: newName, filename: newFilename });
  }

  @Command("remove :name")
  @Description("Removes an existing sound on the bot")
  @Guard(Owner, RequireDB)
  async removeSound(message: CommandMessage): Promise<void> {
    const name: string = message.args.name;
    if (!name) void message.reply(":cross: Please provide a name.");
    const sound = await Database.sounds.findOne({ name });
    if (sound) {
      const filename = sound.filename;
      void Database.sounds.remove(sound);
      void fs.unlink(`../sounds/${filename}`);
    } else void message.reply(":cross: The sound you tried to delete doesn't exist");
  }

  @Command("play :sound")
  @Description("Plays a sound from the soundboard repository")
  @Guard(RequireDB)
  async playSound(message: CommandMessage): Promise<void> {
    //void message.delete();
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    const sound = await Database.sounds.findOne({ name: message.args.sound });

    if (sound && message.member?.voice.channel) {
      const connection = await message.member.voice.channel.join();
      const dispatcher = connection.play(`../sounds/${sound.filename}`);
      dispatcher.on("finish", () => {
        connection.disconnect();
      });
      dispatcher.destroy();
    }
  }

  @Command("import")
  @Description("Re-imports sounds in sounds directory")
  @Guard(Owner, RequireDB)
  async reImportSounds(message: CommandMessage): Promise<void> {
    const result = await Database.importSounds();
    if (result) void message.reply(":white_check_mark: Re-import of sounds successful.");
    else void message.reply(":cross: Re-import of sounds unsuccessful. Check logs.");
  }
}
